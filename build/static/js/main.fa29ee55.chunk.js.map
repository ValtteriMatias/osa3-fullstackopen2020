{"version":3,"sources":["components/Person.js","services/persons.js","components/Notification.js","components/ErrorMsg.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","handleClick","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","ErrorMsg","Filter","props","value","filter","onChange","handleFilterChange","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","errorMessage","setErrorMessage","notification","setNotification","useEffect","personService","initialPersons","console","log","length","window","confirm","returnedNote","n","setTimeout","numbersToShow","toUpperCase","includes","event","target","preventDefault","nameObject","names","map","upNum","catch","error","returnedName","concat","i","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa29ee55.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ person, handleClick }) => {\n  return (\n    <p>{person.name} {person.number} <button onClick={() => handleClick(person)}>delete</button></p>\n  )\n}\n\nexport default Person","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n  const getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  const deleteNumber = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n  \n  export default { getAll, create, update, deleteNumber }","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\n\nconst ErrorMsg = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"errormsg\">\n      {message}\n    </div>\n  )\n}\n\nexport default ErrorMsg","import React, { useState, useEffect } from 'react'\nimport Person from './components/Person'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\nimport ErrorMsg from './components/ErrorMsg'\n\nconst Filter = ( props ) => {\n  return (\n  <form>\n      <div>\n        filter shown filter: <input\n          value={props.filter} \n          onChange={props.handleFilterChange} \n          />\n      </div>\n  </form>\n  )\n}\n\n\nconst PersonForm = (props) => {\n  return (\n  <form onSubmit={props.addName}>\n        <div>\n          name: <input\n            value={props.newName} \n            onChange={props.handleNameChange} \n            />\n        </div>\n          number: <input \n            value={props.newNumber} \n            onChange={props.handleNumberChange} \n            />\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst App = (props) => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [filter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [notification, setNotification] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  console.log('render', persons.length, 'notes')\n\n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    const names = persons.map((person) => person.name);\n    const upNum = persons.filter((n => n.name === nameObject.name))\n    if ( !( names.includes(newName) ) ) {\n      personService\n      .create(nameObject)\n      .then(returnedName => {\n        setPersons(persons.concat(returnedName))\n        setNewName('')\n        setNewNumber('')\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        setErrorMessage(error.response.data.error)\n        setNotification(null)\n      })\n      console.log(errorMessage)\n      setNotification(\n        `Added ${nameObject.name} `\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n        setNotification(null)\n      }, 5000)\n    }\n    else {\n      if (window.confirm(upNum[0].name + \" is already added to phonebook, replace the old number with a new one?\")){\n      personService\n      .update(upNum[0].id, nameObject)\n      .then(response => {\n        setPersons(persons.map(person => person.name !== nameObject.name ? person : response))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Information of '${upNum[0].name}' was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        personService\n          .deleteNumber(upNum[0].id)\n          .then(returnedNote => {\n            setPersons(persons.filter(n => n.id !== upNum[0].id))\n          })\n        \n      })\n      setNotification(\n        `Updated ${nameObject.name}:s phonenumber! `\n      )\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000) \n\n    }\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n\n  const handleClick = (person) => {\n    if (window.confirm(\"Do you really want to delete \" + person.name + \"?\")) { \n    personService\n      .deleteNumber(person.id)\n      .then(returnedNote => {\n        setPersons(persons.filter(n => n.id !== person.id))\n      })\n      setNotification(\n        `Deleted ${person.name} `\n      )\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    }\n\n  }\n\n  const numbersToShow = persons.filter(person => person.name.toUpperCase().includes(filter.toUpperCase()))\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <ErrorMsg message={errorMessage} />\n      <Notification message={notification} />\n      <div>\n        <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      </div>\n      <h2>add a new</h2>\n        <PersonForm addName={addName} \n          newName = {newName} \n          handleNameChange = {handleNameChange} \n          newNumber = {newNumber} \n          handleNumberChange = {handleNumberChange} />\n      <h2>Numbers</h2>\n        {numbersToShow.map((person, i) => <Person key={i} person={person} handleClick={handleClick} />)}\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}