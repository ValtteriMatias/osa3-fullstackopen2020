{"version":3,"sources":["components/Person.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","handleClick","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","Filter","props","value","filter","onChange","handleFilterChange","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","errorMessage","setErrorMessage","useEffect","personService","initialPersons","console","log","length","window","confirm","returnedNote","n","setTimeout","numbersToShow","toUpperCase","includes","event","target","preventDefault","nameObject","names","map","upNum","catch","error","returnedName","concat","i","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7c240de.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ person, handleClick }) => {\n  return (\n    <p>{person.name} {person.number} <button onClick={() => handleClick(person)}>delete</button></p>\n  )\n}\n\nexport default Person","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n  const getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  const deleteNumber = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n  \n  export default { getAll, create, update, deleteNumber }","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Person from './components/Person'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\n\nconst Filter = ( props ) => {\n  return (\n  <form>\n      <div>\n        filter shown filter: <input\n          value={props.filter} \n          onChange={props.handleFilterChange} \n          />\n      </div>\n  </form>\n  )\n}\n\n\nconst PersonForm = (props) => {\n  return (\n  <form onSubmit={props.addName}>\n        <div>\n          name: <input\n            value={props.newName} \n            onChange={props.handleNameChange} \n            />\n        </div>\n          number: <input \n            value={props.newNumber} \n            onChange={props.handleNumberChange} \n            />\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nconst App = (props) => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [filter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  console.log('render', persons.length, 'notes')\n\n  const addName = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    const names = persons.map((person) => person.name);\n    const upNum = persons.filter((n => n.name === nameObject.name))\n    if ( !( names.includes(newName) ) ) {\n      personService\n      .create(nameObject)\n      .then(returnedName => {\n        setPersons(persons.concat(returnedName))\n        setNewName('')\n        setNewNumber('')\n      })\n      console.log(errorMessage)\n      setErrorMessage(\n        `Added ${nameObject.name} `\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n    else {\n      if (window.confirm(upNum[0].name + \" is already added to phonebook, replace the old number with a new one?\")){\n      personService\n      .update(upNum[0].id, nameObject)\n      .then(response => {\n        setPersons(persons.map(person => person.name !== nameObject.name ? person : response))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Information of '${upNum[0].name}' was already deleted from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        personService\n          .deleteNumber(upNum[0].id)\n          .then(returnedNote => {\n            setPersons(persons.filter(n => n.id !== upNum[0].id))\n          })\n        \n      })\n      setErrorMessage(\n        `Updated ${nameObject.name}:s phonenumber! `\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000) \n\n    }\n    }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n\n  const handleClick = (person) => {\n    if (window.confirm(\"Do you really want to delete \" + person.name + \"?\")) { \n    personService\n      .deleteNumber(person.id)\n      .then(returnedNote => {\n        setPersons(persons.filter(n => n.id !== person.id))\n      })\n      setErrorMessage(\n        `Deleted ${person.name} `\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n\n  }\n\n  const numbersToShow = persons.filter(person => person.name.toUpperCase().includes(filter.toUpperCase()))\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <div>\n        <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      </div>\n      <h2>add a new</h2>\n        <PersonForm addName={addName} \n          newName = {newName} \n          handleNameChange = {handleNameChange} \n          newNumber = {newNumber} \n          handleNumberChange = {handleNumberChange} />\n      <h2>Numbers</h2>\n        {numbersToShow.map((person, i) => <Person key={i} person={person} handleClick={handleClick} />)}\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}